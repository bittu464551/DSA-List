/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak=pivot(mountainArr);
        int left=orderAgnosticBS(mountainArr,target,0,peak);
        if(left!=-1){
            return left;
        }
        return orderAgnosticBS(mountainArr,target,peak+1,mountainArr.length()-1);
    }
    int pivot(MountainArray mountainArr){
        int start=0;
        int end=mountainArr.length()-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)<mountainArr.get(mid+1)){
                start=mid+1;
            }
            else{
                end=mid;
            }
        }
        return start;
    }
    int orderAgnosticBS(MountainArray mountainArr,int target,int start,int end){
        
        boolean isAcc=mountainArr.get(start)<mountainArr.get(end);
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==mountainArr.get(mid)){
                return mid;
            }
            if(isAcc){
                if(target<mountainArr.get(mid)){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                if(target<mountainArr.get(mid)){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }
        }
        return -1;
    }
}

